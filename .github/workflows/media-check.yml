name: "üì∏ Media Requirement Check"

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  check-media:
    name: "Verify Media in PR Description"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write  # Changed from 'read' to 'write' to allow comments
      issues: write         # Added to allow issue/PR comments
      statuses: write
      checks: write
      contents: read        # Added for good measure
    
    steps:
      - name: "Check for media in PR description"
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.payload.pull_request.number;
            const pr_body = context.payload.pull_request.body || '';
            const pr_title = context.payload.pull_request.title || '';
            
            console.log('üîç Checking PR #' + pr_number + ' for media (images/videos)...');
            console.log('üìù PR Title:', pr_title);
            console.log('üìÑ PR Body Length:', pr_body.length);
            
            // Check for debug mode
            const debugMode = /\[debug[\s-]?(screenshot|media)\]/i.test(pr_title) || /\[debug[\s-]?(screenshot|media)\]/i.test(pr_body);
            if (debugMode) {
              console.log('üêõ DEBUG MODE ENABLED');
              console.log('üìÑ Full PR Body:', pr_body);
            }
            
            // Skip check for certain types of PRs
            const skipPatterns = [
              /^\[skip[\s-]?(screenshot|media)\]/i,
              /^\[no[\s-]?(screenshot|media)\]/i,
              /^docs?[\s\(\[\-:]|documentation/i,
              /^chore[\s\(\[\-:]|maintenance/i,
              /^test[\s\(\[\-:]|testing/i,
              /^ci[\s\(\[\-:]|continuous.integration/i,
              /^build[\s\(\[\-:]/i,
              /^refactor[\s\(\[\-:]/i,
              /^config[\s\(\[\-:]|configuration/i,
              /^dep[\s\(\[\-:]|dependencies/i,
              /^bump[\s\(\[\-:]/i,
              /^security[\s\(\[\-:]/i,
              /^hotfix[\s\(\[\-:]/i
            ];
            
            // Check if PR should skip screenshot requirement
            const shouldSkip = skipPatterns.some(pattern => 
              pattern.test(pr_title) || pattern.test(pr_body)
            );
            
            if (shouldSkip) {
              console.log('‚è≠Ô∏è Skipping media check based on PR title/description patterns');
              
              try {
                await github.rest.repos.createCommitStatus({
                  owner,
                  repo,
                  sha: context.payload.pull_request.head.sha,
                  state: 'success',
                  target_url: `https://github.com/${owner}/${repo}/pull/${pr_number}`,
                  description: 'Media check skipped for this PR type',
                  context: 'media-check'
                });
                console.log('‚úÖ Successfully set skip status');
              } catch (skipError) {
                console.log('‚ö†Ô∏è Could not set skip status:', skipError.message);
              }
              
              return;
            }
            
            // First, remove code blocks to avoid false positives
            const codeBlockPattern = /```[\s\S]*?```/g;
            const inlineCodePattern = /`[^`]*`/g;
            const cleanedBody = pr_body
              .replace(codeBlockPattern, ' [CODE_BLOCK] ')
              .replace(inlineCodePattern, ' [CODE] ');
            
            console.log('üßπ Cleaned PR body length:', cleanedBody.length);
            
            if (debugMode) {
              console.log('üßπ Cleaned PR Body:', cleanedBody);
              console.log('üîç Testing each pattern:');
            }
            
            // Patterns to detect images, videos and media files
            const mediaPatterns = [
              // Markdown image syntax: ![alt](url) - handle all image and video formats
              /!\[.*?\]\([^)]*\.(png|jpg|jpeg|gif|webp|svg|bmp|tiff|ico|mp4|mov|avi|mkv|webm|flv|wmv|m4v)(?:\?[^)]*)?\)/gi,
              // HTML img tags - handle multiline and extra whitespace
              /<img[^>]*src\s*=\s*['"']([^'"]*\.(png|jpg|jpeg|gif|webp|svg|bmp|tiff|ico)(?:\?[^'"]*)?)['"'][^>]*>/gmi,
              // HTML video tags - handle multiline and extra whitespace
              /<video[^>]*src\s*=\s*['"']([^'"]*\.(mp4|mov|avi|mkv|webm|flv|wmv|m4v)(?:\?[^'"]*)?)['"'][^>]*>/gmi,
              // HTML video with source tags
              /<source[^>]*src\s*=\s*['"']([^'"]*\.(mp4|mov|avi|mkv|webm|flv|wmv|m4v)(?:\?[^'"]*)?)['"'][^>]*>/gmi,
              // GitHub user-images URLs - handle numeric IDs and query params (images)
              /https:\/\/user-images\.githubusercontent\.com\/\d+\/[\w\-\.%]+\.(png|jpg|jpeg|gif|webp|bmp|tiff)(?:\?[^\s\)]*)?/gi,
              // GitHub user-attachments URLs for videos
              /https:\/\/user-attachments\.githubusercontent\.com\/[\w\-\.%\/]+\.(mp4|mov|avi|mkv|webm|flv|wmv|m4v)(?:\?[^\s\)]*)?/gi,
              // GitHub assets URLs - handle numeric asset IDs (images and videos)
              /https:\/\/github\.com\/[\w\-]+\/[\w\-]+\/assets\/\d+\/[\w\-\.%]+\.(png|jpg|jpeg|gif|webp|svg|bmp|tiff|mp4|mov|avi|mkv|webm|flv|wmv|m4v)(?:\?[^\s\)]*)?/gi,
              // GitHub raw content URLs (images and videos)
              /https:\/\/raw\.githubusercontent\.com\/[\w\-]+\/[\w\-]+\/[\w\-\/%.]+\.(png|jpg|jpeg|gif|webp|svg|bmp|tiff|mp4|mov|avi|mkv|webm|flv|wmv|m4v)/gi,
              // GitHub camo proxy URLs
              /https:\/\/camo\.githubusercontent\.com\/[\w\-\.\/]+/gi,
              // Direct image URLs - handle query params and special chars
              /https?:\/\/[^\s\)\]"`]+\.(png|jpg|jpeg|gif|webp|svg|bmp|tiff|ico)(?:\?[^\s\)\]"`]*)?/gi,
              // Direct video URLs - handle query params and special chars
              /https?:\/\/[^\s\)\]"`]+\.(mp4|mov|avi|mkv|webm|flv|wmv|m4v)(?:\?[^\s\)\]"`]*)?/gi,
              // YouTube video links
              /https?:\/\/(?:www\.)?(?:youtube\.com\/(?:watch\?v=|embed\/)|youtu\.be\/)[\w\-]+/gi,
              // Vimeo video links
              /https?:\/\/(?:www\.)?vimeo\.com\/\d+/gi,
              // Loom video links
              /https?:\/\/(?:www\.)?loom\.com\/share\/[\w\-]+/gi
            ];
            
            let foundMedia = [];
            let hasMedia = false;
            
            // Check for media in cleaned PR body (code blocks removed)
            for (const pattern of mediaPatterns) {
              const matches = cleanedBody.match(pattern);
              if (matches) {
                if (debugMode) {
                  console.log(`‚úÖ Pattern matched: ${pattern}`);
                  console.log(`   Found: ${matches.join(', ')}`);
                }
                foundMedia = foundMedia.concat(matches);
                hasMedia = true;
              } else if (debugMode) {
                console.log(`‚ùå No match for pattern: ${pattern}`);
              }
            }
            
            // Remove duplicates and filter out code block placeholders
            foundMedia = [...new Set(foundMedia)].filter(media => 
              !media.includes('[CODE_BLOCK]') && !media.includes('[CODE]')
            );
            
            // Update hasMedia based on filtered results
            hasMedia = foundMedia.length > 0;
            
            // Additional check for media-related keywords in cleaned body
            const mediaKeywords = [
              /screenshot/gi,
              /screen\s*shot/gi,
              /image\s*attached/gi,
              /visual\s*proof/gi,
              /before\s*and\s*after/gi,
              /ui\s*change/gi,
              /interface\s*update/gi,
              /video\s*demo/gi,
              /screen\s*record/gi,
              /demo\s*video/gi,
              /walkthrough/gi,
              /visual\s*demo/gi,
              /media\s*attached/gi,
              /photo/gi,
              /picture/gi
            ];
            
            const hasMediaKeywords = mediaKeywords.some(keyword => 
              keyword.test(cleanedBody) || keyword.test(pr_title)
            );
            
            console.log('ÔøΩ Found media files:', foundMedia.length);
            console.log('üî§ Has media keywords:', hasMediaKeywords);
            
            if (foundMedia.length > 0) {
              console.log('üì∑ Detected media:');
              foundMedia.forEach((media, index) => {
                console.log(`  ${index + 1}. ${media.substring(0, 100)}${media.length > 100 ? '...' : ''}`);
              });
            } else {
              console.log('üîç No media detected in PR body');
              console.log('üìù PR body preview (first 200 chars):', cleanedBody.substring(0, 200));
            }
            
            // Determine the result
            let status, description, summary;
            
            if (hasMedia) {
              status = 'success';
              description = `‚úÖ Media found (${foundMedia.length} file${foundMedia.length !== 1 ? 's' : ''})`;
              summary = `## ‚úÖ Media Requirement: PASSED
            
            Found **${foundMedia.length}** media file${foundMedia.length !== 1 ? 's' : ''} in the PR description.
            
            ### üì∑ Detected Media:
            ${foundMedia.map((media, i) => `${i + 1}. \`${media.length > 80 ? media.substring(0, 80) + '...' : media}\``).join('\n')}
            
            Thank you for including visual documentation! üéâ`;
              
            } else if (hasMediaKeywords) {
              status = 'failure';
              description = '‚ùå Media keywords found but no media files detected';
              summary = `## ‚ùå Media Requirement: FAILED
            
            Your PR description mentions visual content, but no media files were detected.
            
            ### üìã How to add media (images/videos):
            
            #### Method 1: Upload directly to GitHub (Recommended)
            1. Drag and drop your image/video files into the PR description text area
            2. GitHub will automatically generate URLs for your media
            
            #### Method 2: Use Markdown syntax
            \`\`\`markdown
            ![Description of the image](https://your-image-url.com/image.png)
            ![Video demo](https://your-video-url.com/demo.mp4)
            \`\`\`
            
            #### Method 3: Use HTML for better control
            \`\`\`html
            <img src="https://your-image-url.com/image.png" alt="Description" width="500">
            <video src="https://your-video-url.com/demo.mp4" controls width="600"></video>
            \`\`\`
            
            #### Method 4: Embed videos from platforms
            - YouTube: Paste YouTube video links
            - Vimeo: Paste Vimeo video links  
            - Loom: Paste Loom recording links
            
            ### üí° Pro Tips:
            - Show before/after comparisons for UI changes
            - Include screenshots of new features
            - Record video demos for complex interactions
            - Use descriptive alt text for accessibility`;
              
            } else {
              status = 'failure';
              description = '‚ùå No media found in PR description';
              summary = `## ‚ùå Media Requirement: FAILED
            
            No images, videos, or other media files were found in your PR description.
            
            ### üìã Why visual documentation is required:
            - **Visual Documentation**: Help reviewers understand changes quickly
            - **Quality Assurance**: Ensure UI changes work as expected  
            - **Historical Record**: Document visual evolution of the project
            - **Better Reviews**: Enable more thorough and efficient code reviews
            - **Accessibility**: Provide context for complex changes
            
            ### üì∑ How to add media:
            
            #### Method 1: Upload directly to GitHub (Easiest)
            1. Edit your PR description
            2. Drag and drop your image/video files into the text area
            3. GitHub will automatically upload and insert the media URLs
            
            #### Method 2: Use Markdown syntax
            \`\`\`markdown
            ![Description of the change](https://your-image-url.com/image.png)
            \`\`\`
            
            #### Method 3: Use HTML (for videos and advanced control)
            \`\`\`html
            <img src="https://your-image-url.com/image.png" alt="Description" width="600">
            <video src="https://your-video-url.com/demo.mp4" controls width="600"></video>
            \`\`\`
            
            #### Method 4: Link to video platforms
            - **YouTube**: \`https://www.youtube.com/watch?v=VIDEO_ID\`
            - **Vimeo**: \`https://vimeo.com/VIDEO_ID\`
            - **Loom**: \`https://www.loom.com/share/VIDEO_ID\`
            
            ### üéØ What to include:
            - **Before/After**: Show the state before and after your changes
            - **New Features**: Screenshots/videos of new UI elements or functionality
            - **Bug Fixes**: Visual proof that the issue is resolved
            - **Mobile Views**: Include mobile screenshots for responsive changes
            - **Interactions**: Screen recordings for complex user interactions
            - **API Changes**: Screenshots of API responses or tools like Postman
            
            ### üì± Supported Media Types:
            **Images**: PNG, JPG, JPEG, GIF, WebP, SVG, BMP, TIFF, ICO
            **Videos**: MP4, MOV, AVI, MKV, WebM, FLV, WMV, M4V
            **Platforms**: YouTube, Vimeo, Loom (direct links)
            
            ### ‚è≠Ô∏è Skip this check (if applicable):
            If your PR doesn't involve visual changes, add one of these prefixes to your PR title:
            - \`[skip-media]\` or \`[skip-screenshot]\`
            - \`[no-media]\` or \`[no-screenshot]\`
            - \`docs:\` (for documentation)
            - \`test:\` (for tests only)
            - \`chore:\` (for maintenance)
            - \`refactor:\` (for code refactoring without visual changes)`;
            }
            
            // Set the commit status (with error handling)
            try {
              await github.rest.repos.createCommitStatus({
                owner,
                repo,
                sha: context.payload.pull_request.head.sha,
                state: status,
                target_url: `https://github.com/${owner}/${repo}/pull/${pr_number}`,
                description: description,
                context: 'media-check'
              });
              console.log('‚úÖ Successfully set commit status');
            } catch (statusError) {
              console.log('‚ö†Ô∏è Could not set commit status:', statusError.message);
              console.log('‚ÑπÔ∏è This might be due to insufficient permissions');
            }
            
            // Add or update a comment with detailed feedback (with error handling)
            const commentBody = `${summary}
            
            ---
            
            ü§ñ *This check is automated. If you believe this is an error, please contact a maintainer.*
            
            üìö **Learn more**: [Contributing Guidelines](../blob/main/CONTRIBUTION.md) | [Media Requirements](../blob/main/CONTRIBUTION.md#media-requirements)`;
            
            try {
              // Check if we already have a comment from this bot
              const comments = await github.rest.issues.listComments({
                owner,
                repo,
                issue_number: pr_number
              });
              
              const botComment = comments.data.find(comment => 
                comment.user.type === 'Bot' && 
                (comment.body.includes('Media Requirement:') || comment.body.includes('Screenshot Requirement:'))
              );
              
              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner,
                  repo,
                  comment_id: botComment.id,
                  body: commentBody
                });
                console.log('üí¨ Updated existing media check comment');
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: pr_number,
                  body: commentBody
                });
                console.log('üí¨ Created new media check comment');
              }
            } catch (commentError) {
              console.log('‚ö†Ô∏è Could not create/update comment:', commentError.message);
              console.log('‚ÑπÔ∏è Check will continue without comment - status will still be set');
            }
            
            // Log final result
            console.log('üéØ Final Result:', status.toUpperCase());
            console.log('üìù Description:', description);
            
            if (status === 'failure') {
              core.setFailed(description);
            }