name: "üì∏ Screenshot Requirement Check"

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  check-screenshot:
    name: "Verify Screenshot in PR Description"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write  # Changed from 'read' to 'write' to allow comments
      issues: write         # Added to allow issue/PR comments
      statuses: write
      checks: write
      contents: read        # Added for good measure
    
    steps:
      - name: "Check for screenshot in PR description"
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.payload.pull_request.number;
            const pr_body = context.payload.pull_request.body || '';
            const pr_title = context.payload.pull_request.title || '';
            
            console.log('üîç Checking PR #' + pr_number + ' for screenshots...');
            console.log('üìù PR Title:', pr_title);
            console.log('üìÑ PR Body Length:', pr_body.length);
            
            // Check for debug mode
            const debugMode = /\[debug[\s-]?screenshot\]/i.test(pr_title) || /\[debug[\s-]?screenshot\]/i.test(pr_body);
            if (debugMode) {
              console.log('üêõ DEBUG MODE ENABLED');
              console.log('üìÑ Full PR Body:', pr_body);
            }
            
            // Skip check for certain types of PRs
            const skipPatterns = [
              /^\[skip[\s-]?screenshot\]/i,
              /^\[no[\s-]?screenshot\]/i,
              /^docs?[\s\(\[\-:]|documentation/i,
              /^chore[\s\(\[\-:]|maintenance/i,
              /^test[\s\(\[\-:]|testing/i,
              /^ci[\s\(\[\-:]|continuous.integration/i,
              /^build[\s\(\[\-:]/i,
              /^refactor[\s\(\[\-:]/i,
              /^config[\s\(\[\-:]|configuration/i,
              /^dep[\s\(\[\-:]|dependencies/i,
              /^bump[\s\(\[\-:]/i,
              /^security[\s\(\[\-:]/i,
              /^hotfix[\s\(\[\-:]/i
            ];
            
            // Check if PR should skip screenshot requirement
            const shouldSkip = skipPatterns.some(pattern => 
              pattern.test(pr_title) || pattern.test(pr_body)
            );
            
            if (shouldSkip) {
              console.log('‚è≠Ô∏è Skipping screenshot check based on PR title/description patterns');
              
              try {
                await github.rest.repos.createCommitStatus({
                  owner,
                  repo,
                  sha: context.payload.pull_request.head.sha,
                  state: 'success',
                  target_url: `https://github.com/${owner}/${repo}/pull/${pr_number}`,
                  description: 'Screenshot check skipped for this PR type',
                  context: 'screenshot-check'
                });
                console.log('‚úÖ Successfully set skip status');
              } catch (skipError) {
                console.log('‚ö†Ô∏è Could not set skip status:', skipError.message);
              }
              
              return;
            }
            
            // First, remove code blocks to avoid false positives
            const codeBlockPattern = /```[\s\S]*?```/g;
            const inlineCodePattern = /`[^`]*`/g;
            const cleanedBody = pr_body
              .replace(codeBlockPattern, ' [CODE_BLOCK] ')
              .replace(inlineCodePattern, ' [CODE] ');
            
            console.log('üßπ Cleaned PR body length:', cleanedBody.length);
            
            if (debugMode) {
              console.log('üßπ Cleaned PR Body:', cleanedBody);
              console.log('üîç Testing each pattern:');
            }
            
            // Patterns to detect screenshots and images
            const imagePatterns = [
              // Markdown image syntax: ![alt](url) - improved to handle query params
              /!\[.*?\]\([^)]*\.(png|jpg|jpeg|gif|webp|svg)(?:\?[^)]*)?\)/gi,
              // HTML img tags - handle multiline and extra whitespace
              /<img[^>]*src\s*=\s*['"']([^'"]*\.(png|jpg|jpeg|gif|webp|svg)(?:\?[^'"]*)?)['"'][^>]*>/gmi,
              // GitHub user-images URLs - handle numeric IDs and query params
              /https:\/\/user-images\.githubusercontent\.com\/\d+\/[\w\-\.%]+\.(png|jpg|jpeg|gif|webp)(?:\?[^\s\)]*)?/gi,
              // GitHub assets URLs - handle numeric asset IDs
              /https:\/\/github\.com\/[\w\-]+\/[\w\-]+\/assets\/\d+\/[\w\-\.%]+\.(png|jpg|jpeg|gif|webp)(?:\?[^\s\)]*)?/gi,
              // GitHub raw content URLs
              /https:\/\/raw\.githubusercontent\.com\/[\w\-]+\/[\w\-]+\/[\w\-\/%.]+\.(png|jpg|jpeg|gif|webp|svg)/gi,
              // GitHub camo proxy URLs
              /https:\/\/camo\.githubusercontent\.com\/[\w\-\.\/]+/gi,
              // Direct image URLs - handle query params and special chars
              /https?:\/\/[^\s\)\]"`]+\.(png|jpg|jpeg|gif|webp|svg)(?:\?[^\s\)\]"`]*)?/gi
            ];
            
            let foundImages = [];
            let hasScreenshot = false;
            
            // Check for images in cleaned PR body (code blocks removed)
            for (const pattern of imagePatterns) {
              const matches = cleanedBody.match(pattern);
              if (matches) {
                if (debugMode) {
                  console.log(`‚úÖ Pattern matched: ${pattern}`);
                  console.log(`   Found: ${matches.join(', ')}`);
                }
                foundImages = foundImages.concat(matches);
                hasScreenshot = true;
              } else if (debugMode) {
                console.log(`‚ùå No match for pattern: ${pattern}`);
              }
            }
            
            // Remove duplicates and filter out code block placeholders
            foundImages = [...new Set(foundImages)].filter(img => 
              !img.includes('[CODE_BLOCK]') && !img.includes('[CODE]')
            );
            
            // Update hasScreenshot based on filtered results
            hasScreenshot = foundImages.length > 0;
            
            // Additional check for screenshot-related keywords in cleaned body
            const screenshotKeywords = [
              /screenshot/gi,
              /screen\s*shot/gi,
              /image\s*attached/gi,
              /visual\s*proof/gi,
              /before\s*and\s*after/gi,
              /ui\s*change/gi,
              /interface\s*update/gi
            ];
            
            const hasScreenshotKeywords = screenshotKeywords.some(keyword => 
              keyword.test(cleanedBody) || keyword.test(pr_title)
            );
            
            console.log('üñºÔ∏è Found images:', foundImages.length);
            console.log('üî§ Has screenshot keywords:', hasScreenshotKeywords);
            
            if (foundImages.length > 0) {
              console.log('üì∑ Detected images:');
              foundImages.forEach((img, index) => {
                console.log(`  ${index + 1}. ${img.substring(0, 100)}${img.length > 100 ? '...' : ''}`);
              });
            } else {
              console.log('üîç No images detected in PR body');
              console.log('üìù PR body preview (first 200 chars):', cleanedBody.substring(0, 200));
            }
            
            // Determine the result
            let status, description, summary;
            
            if (hasScreenshot) {
              status = 'success';
              description = `‚úÖ Screenshot found (${foundImages.length} image${foundImages.length !== 1 ? 's' : ''})`;
              summary = `## ‚úÖ Screenshot Requirement: PASSED
            
            Found **${foundImages.length}** image${foundImages.length !== 1 ? 's' : ''} in the PR description.
            
            ### üì∑ Detected Images:
            ${foundImages.map((img, i) => `${i + 1}. \`${img.length > 80 ? img.substring(0, 80) + '...' : img}\``).join('\n')}
            
            Thank you for including visual documentation! üéâ`;
              
            } else if (hasScreenshotKeywords) {
              status = 'failure';
              description = '‚ùå Screenshot keywords found but no images detected';
              summary = `## ‚ùå Screenshot Requirement: FAILED
            
            Your PR description mentions screenshots or visual changes, but no images were detected.
            
            ### üìã How to add a screenshot:
            
            #### Method 1: Upload directly to GitHub
            1. Drag and drop your image into the PR description text area
            2. GitHub will automatically generate a URL like \`https://user-images.githubusercontent.com/...\`
            
            #### Method 2: Use Markdown syntax
            \`\`\`markdown
            ![Description of the image](https://your-image-url.com/image.png)
            \`\`\`
            
            #### Method 3: Use HTML
            \`\`\`html
            <img src="https://your-image-url.com/image.png" alt="Description" width="500">
            \`\`\`
            
            ### üí° Pro Tips:
            - Show before/after comparisons for UI changes
            - Include screenshots of new features
            - Highlight the specific changes with arrows or annotations
            - Use descriptive alt text for accessibility`;
              
            } else {
              status = 'failure';
              description = '‚ùå No screenshot found in PR description';
              summary = `## ‚ùå Screenshot Requirement: FAILED
            
            No screenshots or images were found in your PR description.
            
            ### üìã Why screenshots are required:
            - **Visual Documentation**: Help reviewers understand changes quickly
            - **Quality Assurance**: Ensure UI changes work as expected
            - **Historical Record**: Document visual evolution of the project
            - **Better Reviews**: Enable more thorough and efficient code reviews
            
            ### üì∑ How to add a screenshot:
            
            #### Method 1: Upload directly to GitHub (Recommended)
            1. Edit your PR description
            2. Drag and drop your image files into the text area
            3. GitHub will automatically upload and insert the image URLs
            
            #### Method 2: Use Markdown syntax
            \`\`\`markdown
            ![Description of the change](https://your-image-url.com/image.png)
            \`\`\`
            
            #### Method 3: Use HTML (for more control)
            \`\`\`html
            <img src="https://your-image-url.com/image.png" alt="Description" width="600">
            \`\`\`
            
            ### üéØ What to include:
            - **Before/After**: Show the state before and after your changes
            - **New Features**: Screenshot of new UI elements or pages
            - **Bug Fixes**: Visual proof that the issue is resolved
            - **Mobile Views**: Include mobile screenshots for responsive changes
            
            ### ‚è≠Ô∏è Skip this check (if applicable):
            If your PR doesn't involve visual changes, add one of these prefixes to your PR title:
            - \`[skip-screenshot]\`
            - \`[no-screenshot]\`
            - \`docs:\` (for documentation)
            - \`test:\` (for tests only)
            - \`chore:\` (for maintenance)
            - \`refactor:\` (for code refactoring without visual changes)`;
            }
            
            // Set the commit status (with error handling)
            try {
              await github.rest.repos.createCommitStatus({
                owner,
                repo,
                sha: context.payload.pull_request.head.sha,
                state: status,
                target_url: `https://github.com/${owner}/${repo}/pull/${pr_number}`,
                description: description,
                context: 'screenshot-check'
              });
              console.log('‚úÖ Successfully set commit status');
            } catch (statusError) {
              console.log('‚ö†Ô∏è Could not set commit status:', statusError.message);
              console.log('‚ÑπÔ∏è This might be due to insufficient permissions');
            }
            
            // Add or update a comment with detailed feedback (with error handling)
            const commentBody = `${summary}
            
            ---
            
            ü§ñ *This check is automated. If you believe this is an error, please contact a maintainer.*
            
            üìö **Learn more**: [Contributing Guidelines](../blob/main/CONTRIBUTION.md) | [Screenshot Requirements](../blob/main/CONTRIBUTION.md#screenshot-requirements)`;
            
            try {
              // Check if we already have a comment from this bot
              const comments = await github.rest.issues.listComments({
                owner,
                repo,
                issue_number: pr_number
              });
              
              const botComment = comments.data.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('Screenshot Requirement:')
              );
              
              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner,
                  repo,
                  comment_id: botComment.id,
                  body: commentBody
                });
                console.log('üí¨ Updated existing screenshot check comment');
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: pr_number,
                  body: commentBody
                });
                console.log('üí¨ Created new screenshot check comment');
              }
            } catch (commentError) {
              console.log('‚ö†Ô∏è Could not create/update comment:', commentError.message);
              console.log('‚ÑπÔ∏è Check will continue without comment - status will still be set');
            }
            
            // Log final result
            console.log('üéØ Final Result:', status.toUpperCase());
            console.log('üìù Description:', description);
            
            if (status === 'failure') {
              core.setFailed(description);
            }