name: " HIGH PRIORITY: GSSoC'25 Auto-Labeler"

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  priority-auto-label:
    name: " Priority Auto-Label (GSSoC'25 + Complexity)"
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    
    steps:
      - name: " Checkout Repository"
        uses: actions/checkout@v4
        
      - name: " Analyze and Apply Smart Labels"
        uses: actions/github-script@v7
        with:
          script: |
            console.log(' HIGH PRIORITY AUTO-LABELER STARTED');
            
            const { owner, repo } = context.repo;
            const isIssue = context.eventName === 'issues';
            const isPR = context.eventName === 'pull_request';
            
            let itemNumber, itemTitle, itemBody, itemLabels;
            
            if (isIssue) {
              itemNumber = context.payload.issue.number;
              itemTitle = context.payload.issue.title || '';
              itemBody = context.payload.issue.body || '';
              itemLabels = context.payload.issue.labels?.map(l => l.name) || [];
            } else if (isPR) {
              itemNumber = context.payload.pull_request.number;
              itemTitle = context.payload.pull_request.title || '';
              itemBody = context.payload.pull_request.body || '';
              itemLabels = context.payload.pull_request.labels?.map(l => l.name) || [];
            }
            
            // Ensure required labels exist
            const requiredLabels = [
              { name: 'GSSoC\'25', description: 'Part of GirlScript Summer of Code 2025', color: 'ff6b35' },
              { name: 'Level1', description: 'Beginner level task', color: '28a745' },
              { name: 'Level2', description: 'Intermediate level task', color: '0366d6' },
              { name: 'Level3', description: 'Advanced level task', color: 'd73a49' }
            ];
            
            for (const label of requiredLabels) {
              try {
                await github.rest.issues.createLabel({
                  owner, repo,
                  name: label.name,
                  description: label.description,
                  color: label.color
                });
              } catch (error) {
                if (error.status !== 422) {
                  console.log(`Error creating label ${label.name}:`, error.message);
                }
              }
            }
            
            // Always add GSSoC'25 label
            let labelsToAdd = ['GSSoC\'25'];
            
            // Determine complexity level
            let complexityLevel = 'Level1';
            let complexityScore = 0;
            
            const titleLower = itemTitle.toLowerCase();
            const bodyLower = itemBody.toLowerCase();
            
            // Complexity analysis
            const level3Keywords = ['bug', 'error', 'database', 'security', 'api', 'backend', 'architecture'];
            const level2Keywords = ['feature', 'enhancement', 'functionality', 'frontend', 'ui'];
            const level1Keywords = ['documentation', 'readme', 'typo', 'style', 'css'];
            
            for (const keyword of level3Keywords) {
              if (titleLower.includes(keyword) || bodyLower.includes(keyword)) {
                complexityScore += 8;
              }
            }
            
            for (const keyword of level2Keywords) {
              if (titleLower.includes(keyword) || bodyLower.includes(keyword)) {
                complexityScore += 4;
              }
            }
            
            for (const keyword of level1Keywords) {
              if (titleLower.includes(keyword) || bodyLower.includes(keyword)) {
                complexityScore += 1;
              }
            }
            
            if (isPR) {
              try {
                const files = await github.rest.pulls.listFiles({
                  owner, repo, pull_number: itemNumber
                });
                
                // Analyze files for complexity
                for (const file of files.data) {
                  if (/^(app\.js|schema\.js|package\.json)$/.test(file.filename)) {
                    complexityScore += 10;
                  } else if (/controllers\/|routes\/|middleware\.js/.test(file.filename)) {
                    complexityScore += 5;
                  } else if (/\.md$|\.css$|images\//.test(file.filename)) {
                    complexityScore += 1;
                  }
                }
                
                if (files.data.length > 10) complexityScore += 15;
                else if (files.data.length > 5) complexityScore += 8;
                
              } catch (error) {
                complexityScore = 5;
              }
            }
            
            // Determine final level
            if (complexityScore >= 25) {
              complexityLevel = 'Level3';
            } else if (complexityScore >= 10) {
              complexityLevel = 'Level2';
            } else {
              complexityLevel = 'Level1';
            }
            
            labelsToAdd.push(complexityLevel);
            
            // Remove conflicting level labels
            const existingLevelLabels = itemLabels.filter(label => label.startsWith('Level'));
            for (const oldLabel of existingLevelLabels) {
              if (oldLabel !== complexityLevel) {
                try {
                  await github.rest.issues.removeLabel({
                    owner, repo, issue_number: itemNumber, name: oldLabel
                  });
                } catch (error) {
                  console.log(`Could not remove ${oldLabel}`);
                }
              }
            }
            
            // Apply new labels
            try {
              const labelsToApply = labelsToAdd.filter(label => !itemLabels.includes(label));
              
              if (labelsToApply.length > 0) {
                await github.rest.issues.addLabels({
                  owner, repo, issue_number: itemNumber, labels: labelsToApply
                });
                console.log(` Applied labels: ${labelsToApply.join(', ')}`);
              }
              
              console.log(` ${isIssue ? 'Issue' : 'PR'} #${itemNumber}  ${complexityLevel}`);
              
            } catch (error) {
              console.error(' Error applying labels:', error);
            }