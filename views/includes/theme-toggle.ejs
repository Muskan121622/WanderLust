<style>
  /* Screen Reader Only */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Theme Toggle Container */
  .theme-toggle-container {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .theme-toggle-wrapper {
    position: relative;
    display: inline-flex;
    align-items: center;
  }

  /* Hide Default Checkbox */
  .theme-toggle {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }

  /* Toggle Slider */
  .theme-slider {
    position: relative;
    display: flex;
    align-items: center;
    width: 60px;
    height: 32px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    border: 2px solid rgba(255, 255, 255, 0.1);
  }

  .theme-slider:hover {
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
    transform: translateY(-1px);
  }

  .theme-slider:active {
    transform: translateY(0);
  }

  /* Slider Ball */
  .theme-slider::before {
    content: '';
    position: absolute;
    left: 3px;
    width: 24px;
    height: 24px;
    background: white;
    border-radius: 50%;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
  }

  /* Dark Mode Active State */
  .theme-toggle:checked+.theme-slider {
    background: linear-gradient(135deg, #1e3a8a 0%, #312e81 100%);
  }

  .theme-toggle:checked+.theme-slider::before {
    transform: translateX(28px);
  }

  /* Theme Icons */
  .theme-icon {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    transition: all 0.3s ease;
    pointer-events: none;
    font-size: 12px;
  }

  .theme-icon-light {
    left: 8px;
    color: rgba(255, 255, 255, 0.9);
    opacity: 1;
    transform: scale(1) rotate(0deg);
  }

  .theme-icon-dark {
    right: 8px;
    color: rgba(255, 255, 255, 0.4);
    opacity: 0.5;
    transform: scale(0.8) rotate(-30deg);
  }

  .theme-toggle:checked+.theme-slider .theme-icon-light {
    opacity: 0.5;
    transform: scale(0.8) rotate(30deg);
    color: rgba(255, 255, 255, 0.4);
  }

  .theme-toggle:checked+.theme-slider .theme-icon-dark {
    opacity: 1;
    transform: scale(1) rotate(0deg);
    color: rgba(255, 255, 255, 0.9);
  }

  /* Tooltip */
  .theme-toggle-tooltip {
    position: absolute;
    bottom: -35px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.85);
    color: white;
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 0.75rem;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
    pointer-events: none;
    z-index: 1000;
    backdrop-filter: blur(4px);
  }

  .theme-toggle-tooltip::before {
    content: '';
    position: absolute;
    top: -4px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-bottom: 5px solid rgba(0, 0, 0, 0.85);
  }

  .theme-toggle-wrapper:hover .theme-toggle-tooltip {
    opacity: 1;
    visibility: visible;
  }

  /* Success Indicator */
  .theme-toggle-success {
    position: absolute;
    top: -10px;
    right: -10px;
    width: 24px;
    height: 24px;
    background: #10b981;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 12px;
    animation: successPop 0.6s ease;
    box-shadow: 0 2px 8px rgba(16, 185, 129, 0.4);
    z-index: 10;
  }

  @keyframes successPop {
    0% {
      transform: scale(0);
      opacity: 0;
    }

    50% {
      transform: scale(1.2);
      opacity: 1;
    }

    100% {
      transform: scale(0);
      opacity: 0;
    }
  }

  /* Transition Overlay */
  .theme-transition-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at center, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0) 70%);
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease;
    pointer-events: none;
    z-index: 9998;
  }

  .theme-transition-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  /* Loading State */
  .theme-toggle-wrapper.loading .theme-slider {
    opacity: 0.6;
    cursor: wait;
  }

  .theme-toggle-wrapper.loading .theme-slider::before {
    animation: pulse 1s ease-in-out infinite;
  }

  @keyframes pulse {

    0%,
    100% {
      opacity: 1;
    }

    50% {
      opacity: 0.5;
    }
  }

  /* Focus State for Accessibility */
  .theme-toggle:focus+.theme-slider {
    outline: 2px solid #667eea;
    outline-offset: 2px;
  }

  .theme-toggle:focus:not(:focus-visible)+.theme-slider {
    outline: none;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .theme-slider {
      width: 52px;
      height: 28px;
    }

    .theme-slider::before {
      width: 22px;
      height: 22px;
    }

    .theme-toggle:checked+.theme-slider::before {
      transform: translateX(24px);
    }

    .theme-icon {
      font-size: 11px;
    }
  }

  /* Dark Mode Styles */
  [data-theme="dark"] .theme-slider {
    border-color: rgba(255, 255, 255, 0.05);
  }

  [data-theme="dark"] .theme-toggle-tooltip {
    background: rgba(255, 255, 255, 0.9);
    color: #1f2937;
  }

  [data-theme="dark"] .theme-toggle-tooltip::before {
    border-bottom-color: rgba(255, 255, 255, 0.9);
  }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {

    .theme-slider,
    .theme-slider::before,
    .theme-icon,
    .theme-toggle-tooltip {
      transition: none;
    }

    .theme-toggle-success {
      animation: none;
    }
  }
</style>

<!-- Theme Toggle Component -->
<div class="theme-toggle-container" id="theme-toggle-container">
  <div class="theme-toggle-wrapper" id="theme-toggle-wrapper">
    <input type="checkbox" id="theme-toggle" class="theme-toggle" aria-label="Toggle dark mode" role="switch">
    <label for="theme-toggle" class="theme-slider">
      <span class="theme-icon theme-icon-light">
        <i class="fa-solid fa-sun"></i>
      </span>
      <span class="theme-icon theme-icon-dark">
        <i class="fa-solid fa-moon"></i>
      </span>
    </label>
    <div class="theme-toggle-tooltip" id="theme-tooltip">
      <span id="theme-tooltip-text">Switch to dark mode</span>
    </div>
  </div>
</div>

<script>
  // Enhanced Theme Management System
  class ThemeManager {
    constructor() {
      this.currentTheme = 'light';
      this.toggle = document.getElementById('theme-toggle');
      this.wrapper = document.getElementById('theme-toggle-wrapper');
      this.tooltip = document.getElementById('theme-tooltip-text');
      this.storageKey = 'wanderlust-theme-preference';
      this.transitionClass = 'theme-transition-overlay';

      this.init();
    }

    init() {
      // Initialize theme from storage or system preference
      this.loadThemePreference();
      this.setupEventListeners();
      this.updateUI();
      this.createTransitionOverlay();

      // Set ARIA attributes
      this.toggle.setAttribute('aria-checked', this.currentTheme === 'dark');

      console.log('ðŸŒ— Theme Manager initialized:', this.currentTheme);
    }

    loadThemePreference() {
      // Priority: localStorage > system preference > default light
      const storedTheme = localStorage.getItem(this.storageKey);
      const systemPreference = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';

      if (storedTheme && ['light', 'dark'].includes(storedTheme)) {
        this.currentTheme = storedTheme;
      } else {
        this.currentTheme = systemPreference;
      }

      this.applyTheme(this.currentTheme, false);
    }

    setupEventListeners() {
      // Toggle click handler
      if (this.toggle) {
        this.toggle.addEventListener('change', () => {
          this.toggleTheme();
        });
      }

      // Keyboard shortcuts (Ctrl + Shift + T)
      document.addEventListener('keydown', (e) => {
        if (e.ctrlKey && e.shiftKey && e.key === 'T') {
          e.preventDefault();
          this.toggleTheme();
          this.showSuccessIndicator();
        }
      });

      // System theme change detection
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        // Only auto-switch if user hasn't manually set a preference
        if (!localStorage.getItem(this.storageKey)) {
          const newTheme = e.matches ? 'dark' : 'light';
          this.applyTheme(newTheme, true);
          this.updateUI();
        }
      });

      // Page visibility change (for theme sync across tabs)
      document.addEventListener('visibilitychange', () => {
        if (!document.hidden) {
          this.syncThemeAcrossTabs();
        }
      });

      // Storage event listener for cross-tab sync
      window.addEventListener('storage', (e) => {
        if (e.key === this.storageKey && e.newValue !== this.currentTheme) {
          this.currentTheme = e.newValue || 'light';
          this.applyTheme(this.currentTheme, true);
          this.updateUI();
        }
      });
    }

    toggleTheme() {
      const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';
      this.applyTheme(newTheme, true);
      this.saveThemePreference(newTheme);
      this.updateUI();
      this.announceThemeChange(newTheme);
    }

    applyTheme(theme, animate = true) {
      if (animate) {
        this.showTransitionOverlay();
      }

      // Apply theme to document
      if (theme === 'dark') {
        document.documentElement.setAttribute('data-theme', 'dark');
        document.body.classList.add('dark-mode');
      } else {
        document.documentElement.removeAttribute('data-theme');
        document.body.classList.remove('dark-mode');
      }

      this.currentTheme = theme;

      // Update meta theme-color for mobile browsers
      this.updateMetaThemeColor(theme);

      // Trigger custom event for other components
      window.dispatchEvent(new CustomEvent('themeChanged', {
        detail: { theme: theme }
      }));

      if (animate) {
        setTimeout(() => this.hideTransitionOverlay(), 150);
      }
    }

    updateUI() {
      if (!this.toggle || !this.tooltip) return;

      // Update toggle state
      this.toggle.checked = this.currentTheme === 'dark';
      this.toggle.setAttribute('aria-checked', this.currentTheme === 'dark');

      // Update tooltip
      const tooltipText = this.currentTheme === 'dark'
        ? 'Switch to light mode'
        : 'Switch to dark mode';
      this.tooltip.textContent = tooltipText;

      // Update loading state
      if (this.wrapper) {
        this.wrapper.classList.remove('loading');
      }
    }

    saveThemePreference(theme) {
      try {
        localStorage.setItem(this.storageKey, theme);
      } catch (error) {
        console.warn('Could not save theme preference:', error);
      }
    }

    syncThemeAcrossTabs() {
      const storedTheme = localStorage.getItem(this.storageKey);
      if (storedTheme && storedTheme !== this.currentTheme) {
        this.applyTheme(storedTheme, false);
        this.updateUI();
      }
    }

    createTransitionOverlay() {
      if (!document.querySelector(`.${this.transitionClass}`)) {
        const overlay = document.createElement('div');
        overlay.className = this.transitionClass;
        document.body.appendChild(overlay);
      }
    }

    showTransitionOverlay() {
      const overlay = document.querySelector(`.${this.transitionClass}`);
      if (overlay) {
        overlay.classList.add('active');
      }
    }

    hideTransitionOverlay() {
      const overlay = document.querySelector(`.${this.transitionClass}`);
      if (overlay) {
        overlay.classList.remove('active');
      }
    }

    showSuccessIndicator() {
      if (!this.wrapper) return;

      // Create and show success checkmark
      const success = document.createElement('div');
      success.className = 'theme-toggle-success';
      success.innerHTML = '<i class="fa-solid fa-check"></i>';
      this.wrapper.appendChild(success);

      setTimeout(() => {
        if (success.parentNode) {
          success.parentNode.removeChild(success);
        }
      }, 600);
    }

    announceThemeChange(theme) {
      // Announce theme change for screen readers
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = `Switched to ${theme} mode`;

      document.body.appendChild(announcement);
      setTimeout(() => {
        if (document.body.contains(announcement)) {
          document.body.removeChild(announcement);
        }
      }, 1000);
    }

    updateMetaThemeColor(theme) {
      let metaThemeColor = document.querySelector('meta[name="theme-color"]');

      if (!metaThemeColor) {
        metaThemeColor = document.createElement('meta');
        metaThemeColor.name = 'theme-color';
        document.head.appendChild(metaThemeColor);
      }

      metaThemeColor.content = theme === 'dark' ? '#1f2937' : '#ffffff';
    }

    // Public API methods
    getTheme() {
      return this.currentTheme;
    }

    setTheme(theme) {
      if (['light', 'dark'].includes(theme)) {
        this.applyTheme(theme, true);
        this.saveThemePreference(theme);
        this.updateUI();
      }
    }

    resetToSystem() {
      localStorage.removeItem(this.storageKey);
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      this.applyTheme(systemTheme, true);
      this.updateUI();
    }
  }

  // Initialize theme manager when DOM is loaded
  (function () {
    'use strict';

    function initThemeManager() {
      if (window.themeManager) return;

      try {
        window.themeManager = new ThemeManager();
      } catch (error) {
        console.error('Failed to initialize theme manager:', error);
      }
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initThemeManager);
    } else {
      initThemeManager();
    }

    // Expose theme manager globally for debugging
    window.getThemeManager = () => window.themeManager;
  })();
</script>