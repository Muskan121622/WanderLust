<!-- Enhanced Voice-Enabled Travel Chatbot -->
<div id="chatbot-container" class="chatbot-container">
  <button id="chatbot-toggle" class="chatbot-toggle">
    <i class="fa-solid fa-comments"></i>
    <span class="pulse-ring"></span>
  </button>
  
  <div id="chatbot-window" class="chatbot-window">
    <div class="chatbot-header">
      <div class="header-content">
        <div class="bot-avatar">
          <i class="fa-solid fa-robot"></i>
        </div>
        <div class="header-text">
          <h6 class="bot-name">Travel Guide Bot</h6>
          <small class="bot-status" id="bot-status">Ready to help</small>
        </div>
        <div class="header-actions">
          <button id="voice-toggle" class="voice-toggle" title="Toggle Voice Mode">
            <i class="fa-solid fa-microphone"></i>
          </button>
          <button id="chatbot-close" class="close-btn" title="Close Chat">
            <i class="fa-solid fa-times"></i>
          </button>
        </div>
      </div>
    </div>
    
    <div class="chatbot-body">
      <div id="chat-messages" class="chat-messages">
        <div class="bot-message message-entry">
          <div class="message-avatar">
            <i class="fa-solid fa-robot"></i>
          </div>
          <div class="message-content">
            <div class="message-bubble">
              üåç Hi! I'm your AI travel guide. Ask me about destinations, activities, weather, budgets, or planning tips. 
              <br><br>
              <strong>Try voice mode!</strong> Click the microphone icon to speak with me.
            </div>
            <small class="message-time">Just now</small>
          </div>
        </div>
      </div>
      
      <!-- Voice Recording Indicator -->
      <div id="voice-recording" class="voice-recording">
        <div class="recording-animation">
          <div class="recording-circle"></div>
          <div class="recording-pulse"></div>
        </div>
        <p class="recording-text">Listening... <span id="recording-timer">0s</span></p>
        <button id="stop-recording" class="stop-recording-btn">
          <i class="fa-solid fa-stop"></i>
        </button>
      </div>
    </div>
    
    <div class="chatbot-footer">
      <div class="input-container">
        <div class="input-group">
          <input type="text" id="chat-input" class="chat-input" placeholder="Type your message or click mic to speak...">
          <button id="voice-input-btn" class="voice-input-btn" title="Voice Input">
            <i class="fa-solid fa-microphone"></i>
          </button>
          <button id="send-btn" class="send-btn" title="Send Message">
            <i class="fa-solid fa-paper-plane"></i>
          </button>
        </div>
      </div>
      <div class="footer-info">
        <small class="text-muted">
          <span id="voice-status">Voice: Ready</span> ‚Ä¢ 
          <span id="typing-indicator" class="typing-indicator" style="display: none;">Bot is typing...</span>
        </small>
      </div>
    </div>
  </div>
</div>

<script>
// Enhanced Voice-Enabled Chatbot
class VoiceChatbot {
  constructor() {
    this.isListening = false;
    this.recognition = null;
    this.synthesis = window.speechSynthesis;
    this.voiceEnabled = false;
    this.recordingTimer = null;
    this.recordingStartTime = null;
    
    this.initializeElements();
    this.initializeSpeechRecognition();
    this.setupEventListeners();
    this.checkBrowserSupport();
  }

  initializeElements() {
    this.toggle = document.getElementById('chatbot-toggle');
    this.window = document.getElementById('chatbot-window');
    this.input = document.getElementById('chat-input');
    this.sendBtn = document.getElementById('send-btn');
    this.messages = document.getElementById('chat-messages');
    this.voiceToggle = document.getElementById('voice-toggle');
    this.closeBtn = document.getElementById('chatbot-close');
    this.voiceInputBtn = document.getElementById('voice-input-btn');
    this.voiceStatus = document.getElementById('voice-status');
    this.botStatus = document.getElementById('bot-status');
    this.typingIndicator = document.getElementById('typing-indicator');
    this.voiceRecording = document.getElementById('voice-recording');
    this.stopRecordingBtn = document.getElementById('stop-recording');
    this.recordingTimer = document.getElementById('recording-timer');
  }

  initializeSpeechRecognition() {
    // Check for browser support
    if ('webkitSpeechRecognition' in window) {
      this.recognition = new webkitSpeechRecognition();
    } else if ('SpeechRecognition' in window) {
      this.recognition = new SpeechRecognition();
    } else {
      console.warn('Speech recognition not supported in this browser');
      this.disableVoiceFeatures();
      return;
    }

    // Configure speech recognition
    this.recognition.continuous = false;
    this.recognition.interimResults = true;
    this.recognition.lang = 'en-US';
    this.recognition.maxAlternatives = 1;

    // Set up event listeners for speech recognition
    this.recognition.onstart = () => {
      this.isListening = true;
      this.showVoiceRecording();
      this.updateVoiceStatus('Listening...');
      this.voiceInputBtn.classList.add('recording');
    };

    this.recognition.onresult = (event) => {
      let transcript = '';
      for (let i = event.resultIndex; i < event.results.length; i++) {
        if (event.results[i].isFinal) {
          transcript += event.results[i][0].transcript;
        }
      }
      
      if (transcript.trim()) {
        this.input.value = transcript;
        this.hideVoiceRecording();
        this.sendMessage();
      }
    };

    this.recognition.onerror = (event) => {
      console.error('Speech recognition error:', event.error);
      this.handleSpeechError(event.error);
      this.stopListening();
    };

    this.recognition.onend = () => {
      this.stopListening();
    };
  }

  setupEventListeners() {
    // Toggle chatbot window
    this.toggle.addEventListener('click', () => this.toggleWindow());
    
    // Close chatbot
    this.closeBtn.addEventListener('click', () => this.closeWindow());
    
    // Voice mode toggle
    this.voiceToggle.addEventListener('click', () => this.toggleVoiceMode());
    
    // Voice input button
    this.voiceInputBtn.addEventListener('click', () => this.toggleVoiceInput());
    
    // Stop recording button
    this.stopRecordingBtn.addEventListener('click', () => this.stopListening());
    
    // Send message
    this.sendBtn.addEventListener('click', () => this.sendMessage());
    
    // Enter key to send
    this.input.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        this.sendMessage();
      }
    });

    // Input focus/blur events
    this.input.addEventListener('focus', () => {
      this.updateBotStatus('Ready to chat');
    });

    // Click outside to close
    document.addEventListener('click', (e) => {
      if (!this.window.contains(e.target) && !this.toggle.contains(e.target)) {
        if (this.window.style.display === 'flex') {
          this.closeWindow();
        }
      }
    });

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if (e.ctrlKey && e.key === 'k') {
        e.preventDefault();
        this.toggleWindow();
      }
      if (e.key === 'Escape' && this.window.style.display === 'flex') {
        this.closeWindow();
      }
    });
  }

  checkBrowserSupport() {
    const hasWebSpeech = 'SpeechRecognition' in window || 'webkitSpeechRecognition' in window;
    const hasSynthesis = 'speechSynthesis' in window;

    if (hasWebSpeech && hasSynthesis) {
      this.updateVoiceStatus('Voice: Ready');
    } else {
      this.updateVoiceStatus('Voice: Not supported');
      this.disableVoiceFeatures();
    }
  }

  disableVoiceFeatures() {
    this.voiceToggle.style.display = 'none';
    this.voiceInputBtn.style.display = 'none';
    this.input.placeholder = 'Type your message...';
  }

  toggleWindow() {
    const isVisible = this.window.style.display === 'flex';
    if (isVisible) {
      this.closeWindow();
    } else {
      this.openWindow();
    }
  }

  openWindow() {
    this.window.style.display = 'flex';
    this.window.classList.add('animate__animated', 'animate__fadeInUp');
    this.input.focus();
    this.updateBotStatus('Online');
  }

  closeWindow() {
    this.window.style.display = 'none';
    this.stopListening();
    this.updateBotStatus('Away');
  }

  toggleVoiceMode() {
    this.voiceEnabled = !this.voiceEnabled;
    this.voiceToggle.classList.toggle('active', this.voiceEnabled);
    
    if (this.voiceEnabled) {
      this.updateVoiceStatus('Voice: Enabled');
      this.input.placeholder = 'Type or speak your message...';
    } else {
      this.updateVoiceStatus('Voice: Disabled');
      this.input.placeholder = 'Type your message...';
      this.stopListening();
    }
  }

  toggleVoiceInput() {
    if (!this.recognition) {
      this.showError('Voice input not available in this browser');
      return;
    }

    if (this.isListening) {
      this.stopListening();
    } else {
      this.startListening();
    }
  }

  startListening() {
    if (!this.recognition || this.isListening) return;

    try {
      this.recordingStartTime = Date.now();
      this.startRecordingTimer();
      this.recognition.start();
      this.updateBotStatus('Listening...');
    } catch (error) {
      console.error('Error starting speech recognition:', error);
      this.handleSpeechError(error.message);
    }
  }

  stopListening() {
    if (this.recognition && this.isListening) {
      this.recognition.stop();
    }
    
    this.isListening = false;
    this.hideVoiceRecording();
    this.voiceInputBtn.classList.remove('recording');
    this.stopRecordingTimer();
    this.updateVoiceStatus('Voice: Ready');
    this.updateBotStatus('Ready to help');
  }

  startRecordingTimer() {
    let seconds = 0;
    this.recordingTimer.textContent = `${seconds}s`;
    
    this.recordingInterval = setInterval(() => {
      seconds++;
      this.recordingTimer.textContent = `${seconds}s`;
      
      // Auto-stop after 30 seconds
      if (seconds >= 30) {
        this.stopListening();
      }
    }, 1000);
  }

  stopRecordingTimer() {
    if (this.recordingInterval) {
      clearInterval(this.recordingInterval);
      this.recordingInterval = null;
    }
  }

  showVoiceRecording() {
    this.voiceRecording.classList.add('active');
  }

  hideVoiceRecording() {
    this.voiceRecording.classList.remove('active');
  }

  handleSpeechError(error) {
    let message = 'Voice recognition error';
    
    switch (error) {
      case 'no-speech':
        message = 'No speech detected. Please try again.';
        break;
      case 'audio-capture':
        message = 'Microphone not accessible. Please check permissions.';
        break;
      case 'not-allowed':
        message = 'Microphone permission denied. Please allow microphone access.';
        break;
      case 'network':
        message = 'Network error. Please check your connection.';
        break;
      default:
        message = `Voice recognition error: ${error}`;
    }
    
    this.updateVoiceStatus(`Voice: Error`);
    this.showError(message);
  }

  updateVoiceStatus(status) {
    if (this.voiceStatus) {
      this.voiceStatus.textContent = status;
    }
  }

  updateBotStatus(status) {
    if (this.botStatus) {
      this.botStatus.textContent = status;
    }
  }

  showTypingIndicator() {
    this.typingIndicator.style.display = 'inline';
    this.updateBotStatus('Typing...');
  }

  hideTypingIndicator() {
    this.typingIndicator.style.display = 'none';
    this.updateBotStatus('Online');
  }

  addMessage(message, isUser = false, enableSpeech = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `${isUser ? 'user' : 'bot'}-message message-entry`;
    
    const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    
    messageDiv.innerHTML = `
      <div class="message-avatar">
        <i class="fa-solid fa-${isUser ? 'user' : 'robot'}"></i>
      </div>
      <div class="message-content">
        <div class="message-bubble">
          ${message}
          ${!isUser && enableSpeech ? `
            <button class="speak-btn" onclick="chatbot.speakMessage('${message.replace(/'/g, "\\'")}')">
              <i class="fa-solid fa-volume-up"></i>
            </button>
          ` : ''}
        </div>
        <small class="message-time">${time}</small>
      </div>
    `;
    
    this.messages.appendChild(messageDiv);
    this.scrollToBottom();

    // Auto-speak bot messages if voice mode is enabled
    if (!isUser && this.voiceEnabled && enableSpeech) {
      setTimeout(() => this.speakMessage(message), 500);
    }
  }

  speakMessage(text) {
    if (!this.synthesis) return;

    // Cancel any ongoing speech
    this.synthesis.cancel();

    const utterance = new SpeechSynthesisUtterance(text);
    utterance.rate = 0.9;
    utterance.pitch = 1;
    utterance.volume = 0.8;

    // Select a suitable voice
    const voices = this.synthesis.getVoices();
    const preferredVoice = voices.find(voice => 
      voice.lang.startsWith('en') && voice.name.includes('Female')
    ) || voices.find(voice => voice.lang.startsWith('en')) || voices[0];
    
    if (preferredVoice) {
      utterance.voice = preferredVoice;
    }

    utterance.onstart = () => {
      this.updateBotStatus('Speaking...');
    };

    utterance.onend = () => {
      this.updateBotStatus('Ready to help');
    };

    this.synthesis.speak(utterance);
  }

  scrollToBottom() {
    this.messages.scrollTop = this.messages.scrollHeight;
  }

  showError(message) {
    this.addMessage(`‚ö†Ô∏è ${message}`, false, false);
  }

  async sendMessage() {
    const message = this.input.value.trim();
    if (!message) return;

    // Add user message
    this.addMessage(message, true);
    this.input.value = '';

    // Show typing indicator
    this.showTypingIndicator();

    try {
      const response = await fetch('/chatbot/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message })
      });

      const data = await response.json();
      
      // Hide typing indicator
      this.hideTypingIndicator();
      
      // Add bot response
      this.addMessage(data.response, false, true);
      
    } catch (error) {
      console.error('Error sending message:', error);
      this.hideTypingIndicator();
      this.showError('Sorry, I encountered an error. Please try again.');
    }
  }
}

// Initialize chatbot when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  window.chatbot = new VoiceChatbot();
});
</script>

<!-- Additional CSS for speaker button -->
<style>
.speak-btn {
  background: none;
  border: none;
  color: rgba(79, 70, 229, 0.7);
  cursor: pointer;
  font-size: 0.8rem;
  margin-left: 0.5rem;
  padding: 0.25rem;
  border-radius: 4px;
  transition: all 0.3s ease;
}

.speak-btn:hover {
  color: #4f46e5;
  background: rgba(79, 70, 229, 0.1);
}

.user-message .speak-btn {
  color: rgba(255, 255, 255, 0.8);
}

.user-message .speak-btn:hover {
  color: white;
  background: rgba(255, 255, 255, 0.1);
}
</style>