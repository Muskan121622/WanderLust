<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>WanderLust</title>
  <link rel="icon" type="image/x-icon" href="/images/compass.png" />
  <link rel="stylesheet" href="/CSS/style.css" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
    integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&display=swap"
    rel="stylesheet" />
  <link rel="stylesheet" href="/CSS/rating.css" />
  <link rel="stylesheet" href="/CSS/loading.css" />
  <!-- Performance Enhancement Styles -->
  <link rel="stylesheet" href="/CSS/performance-enhanced.css" />
  <link rel="stylesheet" href="/CSS/accessibility.css" />
  <link rel="stylesheet" href="/CSS/i18n-enhanced.css" />
  <link href="https://api.mapbox.com/mapbox-gl-js/v3.11.0/mapbox-gl.css" rel="stylesheet" />
  <script src="https://api.mapbox.com/mapbox-gl-js/v3.11.0/mapbox-gl.js"></script>
</head>

<body>
  <!-- Loading Spinner Component -->
  <div id="global-loading" class="loading-overlay" style="display: none;">
    <div class="loading-spinner"></div>
  </div>
  
  <canvas id="fluid-cursor"></canvas>

  <%- include("../includes/navbar.ejs") %>

    <div class="container">
      <%- include("../includes/flash.ejs") %> <%- body %>
    </div>

    <%- include("../includes/footer.ejs") %>


      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
      <script src="/JS/script.js"></script>
      <script src="/JS/loading.js"></script>
      
      <!-- Performance Optimization Scripts -->
      <script src="/JS/performance-optimizer.js"></script>
      <script src="/JS/accessibility.js"></script>
      <script src="/JS/lazy-loading.js"></script>
      <script src="/JS/i18n-manager.js"></script>
      
      <!-- Initialize Performance Systems -->
      <script>
        // Initialize performance optimization when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
          console.log('ðŸš€ Initializing WanderLust Performance Suite...');
          
          // Performance dashboard toggle (Ctrl+Shift+P)
          document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.shiftKey && e.key === 'P') {
              e.preventDefault();
              togglePerformanceDashboard();
            }
          });
        });
        
        function togglePerformanceDashboard() {
          let dashboard = document.getElementById('performance-dashboard');
          
          if (!dashboard) {
            dashboard = createPerformanceDashboard();
            document.body.appendChild(dashboard);
          }
          
          dashboard.classList.toggle('visible');
          
          if (dashboard.classList.contains('visible')) {
            updatePerformanceMetrics();
            // Update metrics every 2 seconds while visible
            window.performanceUpdateInterval = setInterval(updatePerformanceMetrics, 2000);
          } else {
            clearInterval(window.performanceUpdateInterval);
          }
        }
        
        function createPerformanceDashboard() {
          const dashboard = document.createElement('div');
          dashboard.id = 'performance-dashboard';
          dashboard.className = 'performance-dashboard';
          
          dashboard.innerHTML = `
            <h3><i class="fa fa-tachometer-alt"></i> Performance Dashboard</h3>
            <div class="performance-metric" id="page-load-metric">
              <span class="metric-label">Page Load</span>
              <span class="metric-value">--<span class="metric-unit">ms</span></span>
            </div>
            <div class="performance-metric" id="cache-hit-metric">
              <span class="metric-label">Cache Hit Rate</span>
              <span class="metric-value">--<span class="metric-unit">%</span></span>
            </div>
            <div class="performance-metric" id="memory-metric">
              <span class="metric-label">Memory Usage</span>
              <span class="metric-value">--<span class="metric-unit">MB</span></span>
            </div>
            <div class="performance-metric" id="dom-nodes-metric">
              <span class="metric-label">DOM Nodes</span>
              <span class="metric-value">--</span>
            </div>
            <div class="performance-metric" id="network-metric">
              <span class="metric-label">Network</span>
              <span class="metric-value">Online</span>
            </div>
          `;
          
          return dashboard;
        }
        
        function updatePerformanceMetrics() {
          // Page load time
          if (performance.timing) {
            const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
            updateMetric('page-load-metric', loadTime, loadTime < 3000 ? 'good' : loadTime < 5000 ? 'warning' : 'error');
          }
          
          // Memory usage (if available)
          if (performance.memory) {
            const memoryUsage = Math.round(performance.memory.usedJSHeapSize / 1024 / 1024);
            updateMetric('memory-metric', memoryUsage, memoryUsage < 50 ? 'good' : memoryUsage < 100 ? 'warning' : 'error');
          }
          
          // DOM nodes
          const domNodes = document.getElementsByTagName('*').length;
          updateMetric('dom-nodes-metric', domNodes, domNodes < 1000 ? 'good' : domNodes < 2000 ? 'warning' : 'error');
          
          // Network status
          const networkStatus = navigator.onLine ? 'Online' : 'Offline';
          updateMetric('network-metric', networkStatus, navigator.onLine ? 'good' : 'error');
          
          // Cache hit rate (if performance optimizer is available)
          if (window.performanceOptimizer) {
            const stats = window.performanceOptimizer.getPerformanceStats();
            const hitRate = stats.cache.hitRate;
            updateMetric('cache-hit-metric', hitRate.replace('%', ''), parseFloat(hitRate) > 80 ? 'good' : parseFloat(hitRate) > 60 ? 'warning' : 'error');
          }
        }
        
        function updateMetric(metricId, value, status) {
          const metric = document.getElementById(metricId);
          if (metric) {
            const valueElement = metric.querySelector('.metric-value');
            valueElement.textContent = value + (valueElement.querySelector('.metric-unit')?.textContent || '');
            
            metric.className = `performance-metric ${status}`;
          }
        }
      </script>
      <script>
        const canvas = document.getElementById("fluid-cursor");
        const ctx = canvas.getContext("2d");

        let width = (canvas.width = window.innerWidth);
        let height = (canvas.height = window.innerHeight);

        const particles = [];

        class Particle {
          constructor(x, y) {
            this.x = x;
            this.y = y;
            this.size = Math.random() * 4 + 2;
            this.speedX = (Math.random() - 0.5) * 3;
            this.speedY = (Math.random() - 0.5) * 3;
            this.hue = Math.random() * 360;
            this.alpha = 1;
          }
          update() {
            this.x += this.speedX;
            this.y += this.speedY;
            this.alpha -= 0.02;
          }
          draw() {
            ctx.beginPath();
            ctx.fillStyle = `hsla(${this.hue}, 100%, 60%, ${this.alpha})`;
            ctx.shadowBlur = 20;
            ctx.shadowColor = `hsl(${this.hue}, 100%, 60%)`;
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fill();
          }
        }

        function handleParticles() {
          for (let i = 0; i < particles.length; i++) {
            particles[i].update();
            particles[i].draw();

            if (particles[i].alpha <= 0) {
              particles.splice(i, 1);
              i--;
            }
          }
        }

        function animate() {
          ctx.clearRect(0, 0, width, height);
          handleParticles();
          requestAnimationFrame(animate);
        }

        animate();

        window.addEventListener("resize", () => {
          width = canvas.width = window.innerWidth;
          height = canvas.height = window.innerHeight;
        });

        // document.addEventListener("mousemove", (e) => {
        //   for (let i = 0; i < 5; i++) {
        //     particles.push(new Particle(e.clientX, e.clientY));
        //   }
        // });
      </script>
      <div id="cursor-glow"></div>
      <div id="page-glow" class="page-glow"></div>

</body>

</html>